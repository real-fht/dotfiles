{
  config,
  lib,
  pkgs,
  ...
}:
# I guess a custom wrapper around shell configuration, like aliases, custom
# initialisation for some programs, etc...
with lib; {
  options.fht.shell = with types; {
    zsh.enable = mkBoolOpt' false "Whether to enable the Z-shell.";
    aliases = mkOpt' attrs {} "Custom shell aliases for the user";
    # Why using this when there's programs.zsh.extraInit?
    # Since sometimes I want to setup something only at my level (user environment)
    # and thus running the shell-based initialization for a said program system-wide would
    # not work.
    extraInit = mkOpt' lines "" "Additional shell initialisation.";
  };

  config = let
    cfg = config.fht.shell;
  in
    mkMerge [
      (mkIf cfg.zsh.enable {
        # I can override all the users on the system to use zsh, but rather keep it clean
        # and only override the default shell for my user.
        user.shell = pkgs.zsh;

        # Enabling this system wide, meaning that some initialisation will be done inside
        # /etc/z{profile,env,shrc,logout} files, keeping my home clean.
        programs.zsh = {
          enable = true;
          enableCompletion = true;
          # Initiate completion myself, because enableGlobalComptInit does it too early
          # for other commands to actually register. And running compinit twice is slow.
          enableGlobalCompInit = false;
          # promptinit = ""; # managed by starship.
        };

        # Install zsh for my user aswell as completion for nix tools.
        user.packages = with pkgs; [zsh nix-zsh-completions];

        # Install configuration files.
        home.home.activation.installZSHConfig = ''
          [ ! -d $XDG_CONFIG_HOME/zsh ] &&
            ln -s $DOTFILE_FLAKE/config/zsh $XDG_CONFIG_HOME/zsh
        '';
      })

      {
        # Custom aliases definition
        home.xdg.configFile."shell/aliases.sh".text = let
          # Transform out aliases attr into strings.
          aliasLines = mapAttrsToList (n: v: ''alias ${n}="${v}"'') cfg.aliases;
        in ''
          #!/usr/bin/env sh

          # Custom aliases definition.
          # This file was autogenerated by NixOS! Do not edit!

          ${concatStringsSep "\n" aliasLines}
        '';

        # Extra initialisation file.
        home.xdg.configFile."shell/extraInit.sh".text = ''
          #!/usr/bin/env sh

          # Extra shell initialisation.
          # This file was autogenerated by NixOS! Do not edit!

          ${cfg.extraInit}
        '';
      }

      {
        # Setup a pretty prompt using starship!
        programs.starship = {
          enable = true;

          settings = {
            scan_timeout = 10;
            add_newline = true;
            line_break.disabled = false;
            cmd_duration.disabled = false;

            # How should the prompt be formatted
            format = let
              git_status = "$git_branch $git_status $git_metrics";
              languages = "$nodejs$c";
            in "$directory $nix_shell ${git_status} $fill ${languages} $time $line_break$character ";

            # Sections setup
            character = {
              format = "$symbol(bold)";
              success_symbol = "[❯](bold green)";
              error_symbol = "[❯](bold red)";
            };

            directory = {
              truncation_length = 3;
              truncate_to_repo = false;
              format = "[$path]($style)[$read_only]($read_only_style)";
              style = "blue bold";
              read_only = "";
              read_only_style = "red";
            };

            git_branch = {
              always_show_remote = false;
              format = "[~](black bold) [$symbol$branch(:$remote_branch)]($style)";
            };

            git_status = {
              format = "[[(*$conflicted$untracked$modified$staged$renamed$deleted)](218) ($ahead_behind$stashed)]($style)";
              style = "cyan";
              conflicted = "​";
              untracked = "​";
              modified = "​";
              staged = "​";
              renamed = "​";
              deleted = "​";
              stashed = "≡";
            };

            git_metrics = {
              disabled = false;
              format = "([+$added]($added_style) )([-$deleted]($deleted_style) )";
              # added_style = "bold green";
              # deleted_style = "bold red";
            };

            fill = {symbol = " ";};

            c = {
              format = " [$symbol($version(-$name))]($style) [~](black bold)";
              style = "bold cyan";
            };

            nodejs = {format = "[$symbol($version)]($style) [~](black bold)";};

            time = {
              disabled = false;
              format = "[$time]($style)";
              style = "white bold";
            };

            aws.symbol = "  ";
            conda.symbol = " ";
            dart.symbol = " ";
            docker_context.symbol = " ";
            elixir.symbol = " ";
            elm.symbol = " ";
            gcloud.symbol = " ";
            golang.symbol = " ";
            java.symbol = " ";
            julia.symbol = " ";
            lua.symbol = " ";
            memory_usage.symbol = " ";
            nim.symbol = " ";
            nix_shell.symbol = " ";
            nodejs.symbol = " ";
            package.symbol = " ";
            perl.symbol = " ";
            php.symbol = " ";
            python.symbol = " ";
            ruby.symbol = " ";
            rust.symbol = " ";
            scala.symbol = " ";
            swift.symbol = "ﯣ ";
            terraform.symbol = "行 ";
          };
        };
      }
    ];
}
